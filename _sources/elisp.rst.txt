=====
Elisp
=====

    :Date: November 09, 2020

.. contents::



1 terminology
-------------

1.1 keyword
~~~~~~~~~~~

- `info:elisp#Constant Variables <elisp#Constant%20Variables>`_

- In Emacs Lisp, certain symbols normally evaluate to themselves.  These
  include ‘nil’ and ‘t’, as well as any symbol whose name starts with ‘:’
  (these are called “keywords”).

1.2 customization items
~~~~~~~~~~~~~~~~~~~~~~~

- `info:elisp#Customization <elisp#Customization>`_

- customizable variables

- customizable faces

- customization groups

1.3 customizable variables
~~~~~~~~~~~~~~~~~~~~~~~~~~

- `info:elisp#Customization <elisp#Customization>`_

- This is one kind of `1.2 customization items`_.

- defined with the ‘defcustom’ macro

- See `info:elisp#Variable Definitions <elisp#Variable%20Definitions>`_

1.4 customizable faces
~~~~~~~~~~~~~~~~~~~~~~

- This is one kind of `1.2 customization items`_.

- defined with ‘defface’ (described separately in \*note Defining Faces\:\:)

- See `info:elisp#Defining Faces <elisp#Defining%20Faces>`_

1.5 customization groups
~~~~~~~~~~~~~~~~~~~~~~~~

- This is one kind of `1.2 customization items`_.

- defined with ‘defgroup’ (\*note Group Definitions\:\:)

- See `info:elisp#Group Definitions <elisp#Group%20Definitions>`_

1.6 global variables
~~~~~~~~~~~~~~~~~~~~

- `info:elisp#Defining Variables <elisp#Defining%20Variables>`_

- A “variable definition” is a construct that announces your intention to use a symbol as a global variable.  It uses the special forms ‘defvar’ or ‘defconst’, which are documented below.

  - Emacs Lisp does not actually prevent you from changing the value of a variable defined with ‘defconst’.

  - One notable difference between the two forms is that ‘defconst’ unconditionally initializes the variable, whereas ‘defvar’ initializes it only if it is originally void.

1.7 composite types
~~~~~~~~~~~~~~~~~~~

- `info:elisp#Composite Types <elisp#Composite%20Types>`_

2 symbols
---------

2.1 :
~~~~~

2.2 defcustom
~~~~~~~~~~~~~

2.3 defface
~~~~~~~~~~~

2.4 defgroup
~~~~~~~~~~~~

2.5 defvar
~~~~~~~~~~

2.6 defconst
~~~~~~~~~~~~

2.7 ``‘(repeat ELEMENT-TYPE)’``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- is a composite type constructor (`info:elisp#Composite Types <elisp#Composite%20Types>`_)

- The value must be a list and each element of the list must fit the type ELEMENT-TYPE.  This appears in the customization buffer as a list of elements, with ‘[INS]’ and ‘[DEL]’ buttons for adding more elements or removing elements.

2.8 Function: ``list &rest OBJECTS``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- `info:elisp#Building Lists <elisp#Building%20Lists>`_

- This function creates a list with OBJECTS as its elements.  The resulting list is always ‘nil’-terminated.  If no OBJECTS are given, the empty list is returned.

2.9 ``‘(choice ALTERNATIVE-TYPES...)’``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- is a composite type constructor (`info:elisp#Composite Types <elisp#Composite%20Types>`_)

- The value must fit one of ALTERNATIVE-TYPES.  For example, ‘(choice integer string)’ allows either an integer or a string.

- In the customization buffer, the user selects an alternative using a menu, and can then edit the value in the usual way for that alternative.

3 to be organized later
-----------------------

- ``(derived-mode-p &rest MODES)``

  Non-nil if the current major mode is derived from one of MODES. Uses the ‘derived-mode-parent’ property of the symbol (``MODES``) to trace backwards.
